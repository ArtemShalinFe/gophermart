// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/gophermart/internal/server/handlers.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	models "github.com/ArtemShalinFe/gophermart/cmd/gophermart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockStorage) AddOrder(ctx context.Context, order *models.OrderDTO) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, order)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStorageMockRecorder) AddOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStorage)(nil).AddOrder), ctx, order)
}

// AddUser mocks base method.
func (m *MockStorage) AddUser(ctx context.Context, us *models.UserDTO) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, us)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorageMockRecorder) AddUser(ctx, us interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorage)(nil).AddUser), ctx, us)
}

// AddWithdrawn mocks base method.
func (m *MockStorage) AddWithdrawn(ctx context.Context, userID, orderNumber string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawn", ctx, userID, orderNumber, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawn indicates an expected call of AddWithdrawn.
func (mr *MockStorageMockRecorder) AddWithdrawn(ctx, userID, orderNumber, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawn", reflect.TypeOf((*MockStorage)(nil).AddWithdrawn), ctx, userID, orderNumber, sum)
}

// GetCurrentBalance mocks base method.
func (m *MockStorage) GetCurrentBalance(ctx context.Context, userID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBalance indicates an expected call of GetCurrentBalance.
func (mr *MockStorageMockRecorder) GetCurrentBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBalance", reflect.TypeOf((*MockStorage)(nil).GetCurrentBalance), ctx, userID)
}

// GetOrder mocks base method.
func (m *MockStorage) GetOrder(ctx context.Context, order *models.OrderDTO) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, order)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStorageMockRecorder) GetOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStorage)(nil).GetOrder), ctx, order)
}

// GetOrdersForAccrual mocks base method.
func (m *MockStorage) GetOrdersForAccrual(ctx context.Context) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForAccrual", ctx)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForAccrual indicates an expected call of GetOrdersForAccrual.
func (mr *MockStorageMockRecorder) GetOrdersForAccrual(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForAccrual", reflect.TypeOf((*MockStorage)(nil).GetOrdersForAccrual), ctx)
}

// GetUploadedOrders mocks base method.
func (m *MockStorage) GetUploadedOrders(ctx context.Context, order *models.User) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadedOrders", ctx, order)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadedOrders indicates an expected call of GetUploadedOrders.
func (mr *MockStorageMockRecorder) GetUploadedOrders(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadedOrders", reflect.TypeOf((*MockStorage)(nil).GetUploadedOrders), ctx, order)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(ctx context.Context, us *models.UserDTO) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, us)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(ctx, us interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), ctx, us)
}

// GetWithdrawalList mocks base method.
func (m *MockStorage) GetWithdrawalList(ctx context.Context, userID string) ([]*models.UserWithdrawalsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalList", ctx, userID)
	ret0, _ := ret[0].([]*models.UserWithdrawalsHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalList indicates an expected call of GetWithdrawalList.
func (mr *MockStorageMockRecorder) GetWithdrawalList(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalList", reflect.TypeOf((*MockStorage)(nil).GetWithdrawalList), ctx, userID)
}

// GetWithdrawals mocks base method.
func (m *MockStorage) GetWithdrawals(ctx context.Context, userID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockStorageMockRecorder) GetWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockStorage)(nil).GetWithdrawals), ctx, userID)
}

// UpdateOrder mocks base method.
func (m *MockStorage) UpdateOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStorageMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStorage)(nil).UpdateOrder), ctx, order)
}
